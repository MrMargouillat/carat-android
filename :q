[1mdiff --git a/caratApp/src/main/assets/caratserver.properties b/caratApp/src/main/assets/caratserver.properties[m
[1mindex f8e1c36..3add461 100644[m
[1m--- a/caratApp/src/main/assets/caratserver.properties[m
[1m+++ b/caratApp/src/main/assets/caratserver.properties[m
[36m@@ -2,8 +2,8 @@[m
 # PORT: default 8080[m
 [m
 # Global[m
[31m-PORT_GLOBAL = 8080[m
[31m-ADDRESS_GLOBAL = caratserver.cs.helsinki.fi[m
[32m+[m[32mPORT_GLOBAL = 8443[m
[32m+[m[32mADDRESS_GLOBAL = 10.112.17.229[m
 [m
 # EU[m
 PORT_EU = 8080[m
[1mdiff --git a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/CaratApplication.java b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/CaratApplication.java[m
[1mindex 748e3da..a6548a0 100644[m
[1m--- a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/CaratApplication.java[m
[1m+++ b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/CaratApplication.java[m
[36m@@ -42,6 +42,7 @@[m [mimport edu.berkeley.cs.amplab.carat.android.sampling.SamplingLibrary;[m
 import edu.berkeley.cs.amplab.carat.android.storage.CaratDataStorage;[m
 import edu.berkeley.cs.amplab.carat.android.storage.SimpleHogBug;[m
 import edu.berkeley.cs.amplab.carat.android.utils.Logger;[m
[32m+[m[32mimport edu.berkeley.cs.amplab.carat.thrift.ProcessInfo;[m
 import edu.berkeley.cs.amplab.carat.thrift.Questionnaire;[m
 import edu.berkeley.cs.amplab.carat.thrift.Reports;[m
 [m
[36m@@ -161,6 +162,10 @@[m [mpublic class CaratApplication extends Application {[m
         }.start();[m
 [m
         super.onCreate();[m
[32m+[m[32m        /*for(ProcessInfo pi : SamplingLibrary.getRunningProcessInfoForSample(getApplicationContext(), System.currentTimeMillis()-600000)){[m
[32m+[m[32m            Logger.d(TAG, pi.toString());[m
[32m+[m[32m        }*/[m
[32m+[m[32m        SamplingLibrary.getRunningProcessesFromEventLog(getApplicationContext(), System.currentTimeMillis()-600000);[m
     }[m
 [m
     // Utility methods[m
[1mdiff --git a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/UsageManager.java b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/UsageManager.java[m
[1mindex ea9f8db..e713973 100644[m
[1m--- a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/UsageManager.java[m
[1m+++ b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/UsageManager.java[m
[36m@@ -240,7 +240,7 @@[m [mpublic class UsageManager {[m
         return "Unknown";[m
     }[m
 [m
[31m-    private static String getEventName(int eventCode){[m
[32m+[m[32m    public static String getEventName(int eventCode){[m
         switch(eventCode){[m
             case 0: return "NONE";[m
             case 1: return "MOVE_TO_FOREGROUND";[m
[1mdiff --git a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/protocol/CommunicationManager.java b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/protocol/CommunicationManager.java[m
[1mindex 973f10b..7ab4eb2 100644[m
[1m--- a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/protocol/CommunicationManager.java[m
[1m+++ b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/protocol/CommunicationManager.java[m
[36m@@ -26,6 +26,7 @@[m [mimport android.util.TimeUtils;[m
 import edu.berkeley.cs.amplab.carat.android.CaratApplication;[m
 import edu.berkeley.cs.amplab.carat.android.Constants;[m
 import edu.berkeley.cs.amplab.carat.android.R;[m
[32m+[m[32mimport edu.berkeley.cs.amplab.carat.android.sampling.Sampler2;[m
 import edu.berkeley.cs.amplab.carat.android.sampling.SamplingLibrary;[m
 import edu.berkeley.cs.amplab.carat.android.utils.Logger;[m
 import edu.berkeley.cs.amplab.carat.thrift.Answers;[m
[1mdiff --git a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/sampling/SamplingLibrary.java b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/sampling/SamplingLibrary.java[m
[1mindex 672a4ee..64851f8 100644[m
[1m--- a/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/sampling/SamplingLibrary.java[m
[1m+++ b/caratApp/src/main/java/edu/berkeley/cs/amplab/carat/android/sampling/SamplingLibrary.java[m
[36m@@ -31,12 +31,14 @@[m [mimport java.util.Map.Entry;[m
 import java.util.Properties;[m
 import java.util.Set;[m
 import java.util.TimeZone;[m
[32m+[m[32mimport java.util.TreeMap;[m
 import java.util.concurrent.TimeUnit;[m
 [m
 import android.app.Activity;[m
 import android.app.ActivityManager;[m
 import android.app.ActivityManager.RunningAppProcessInfo;[m
 import android.app.ActivityManager.RunningServiceInfo;[m
[32m+[m[32mimport android.app.usage.UsageEvents;[m
 import android.app.usage.UsageStats;[m
 import android.bluetooth.BluetoothAdapter;[m
 import android.content.ComponentName;[m
[36m@@ -702,6 +704,35 @@[m [mpublic final class SamplingLibrary {[m
 		return activities;[m
 	}[m
 [m
[32m+[m	[32mpublic static void getRunningProcessesFromEventLog(Context context, long begin){[m
[32m+[m		[32mif(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {[m
[32m+[m			[32mMap<String, TreeMap<Long, Integer>> log = UsageManager.getEventLogs(context, System.currentTimeMillis()-TimeUnit.MINUTES.toMillis(20));[m
[32m+[m			[32mfor(String packageName : log.keySet()){[m
[32m+[m				[32mTreeMap<Long, Integer> events = log.get(packageName);[m
[32m+[m				[32mlong lastForeground = -1;[m
[32m+[m				[32mlong foreground = 0;[m
[32m+[m				[32mlong launchCount = 0;[m
[32m+[m				[32mfor(long timestamp : events.keySet()){[m
[32m+[m					[32mswitch(events.get(timestamp)){[m
[32m+[m						[32mcase UsageEvents.Event.MOVE_TO_BACKGROUND:[m
[32m+[m							[32mif(lastForeground != -1){[m
[32m+[m								[32mlong session = timestamp - lastForeground;[m
[32m+[m								[32mforeground += session;[m
[32m+[m								[32mif(session >= 1000){[m
[32m+[m									[32mlaunchCount++;[m
[32m+[m								[32m}[m
[32m+[m							[32m}[m
[32m+[m							[32mbreak;[m
[32m+[m						[32mcase UsageEvents.Event.MOVE_TO_FOREGROUND:[m
[32m+[m							[32mlastForeground = timestamp;[m
[32m+[m							[32mbreak;[m
[32m+[m					[32m}[m
[32m+[m				[32m}[m
[32m+[m				[32mLogger.d(TAG, packageName + " was launched " + launchCount + " times and spent " + foreground + "ms on foreground");[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
 	public static Map<String, List<PackageProcess>> getRunningServices(Context context){[m
 		Map<String, List<PackageProcess>> result = new HashMap<>();[m
 		Map<String, HashMap<String, PackageProcess>> services = new HashMap<>();[m
[36m@@ -1208,7 +1239,7 @@[m [mpublic final class SamplingLibrary {[m
 					process.setProcessName(serviceToProcessName(process.processName));[m
 					renamed.add(process);[m
 				}[m
[31m-				processInfo.setProcesses(renamed);[m
[32m+[m				[32mapplications.addAll(renamed);[m
 			}[m
 [m
 			// Add currently running activities belonging to this package. These are mostly less[m
